with "ATSAMD51J19A.gpr";
with "cortex_m4f.gpr";
with "hal.gpr";

project Minisamd51_Bsp is

   for Library_Name use "Minisamd51_Bsp";
   for Library_Version use "0.1.0";

   for Source_Dirs use ("src");
   for Object_Dir use "obj";
   for Library_Dir use "lib";

   for Target use "arm-eabi";
   for Runtime ("Ada") use "zfp-cortex-m4f";

   package Device_Configuration is
      for CPU_Name use "ARM Cortex-M4F";
      for Number_Of_Interrupts use "136";

      for Memories use ("HSRAM", "FLASH", "BKUPRAM");
      for Boot_Memory use "FLASH";

      for Mem_Kind ("HSRAM") use "ram";
      for Address ("HSRAM") use "0x20000000";
      for Size ("HSRAM") use "0x30000";

      --  Start flash after the uf2 bootloader
      for Mem_Kind ("FLASH") use "rom";
      for Address ("FLASH") use "16384";
      for Size ("FLASH") use "507904";

      for Mem_Kind ("BKUPRAM") use "ram";
      for Address ("BKUPRAM") use "0x47000000";
      for Size ("BKUPRAM") use "0x2000";
   end Device_Configuration;

   type Library_Type_Type is ("relocatable", "static", "static-pic");
   Library_Type : Library_Type_Type :=
     external ("MINISAMD51_BSP_LIBRARY_TYPE", external ("LIBRARY_TYPE", "static"));
   for Library_Kind use Library_Type;

   type Enabled_Kind is ("enabled", "disabled");
   Compile_Checks : Enabled_Kind := External ("MINISAMD51_BSP_COMPILE_CHECKS", "enabled");
   Runtime_Checks : Enabled_Kind := External ("MINISAMD51_BSP_RUNTIME_CHECKS", "disabled");
   Style_Checks : Enabled_Kind := External ("MINISAMD51_BSP_STYLE_CHECKS", "enabled");
   Contracts_Checks : Enabled_Kind := External ("MINISAMD51_BSP_CONTRACTS", "disabled");

   type Build_Kind is ("debug", "optimize");
   Build_Mode : Build_Kind := External ("MINISAMD51_BSP_BUILD_MODE", "optimize");

   Compile_Checks_Switches := ();
   case Compile_Checks is
      when "enabled" =>
         Compile_Checks_Switches :=
           ("-gnatwa",  -- All warnings
            "-gnatVa",  -- All validity checks
            "-gnatwe"); -- Warnings as errors
      when others => null;
   end case;

   Runtime_Checks_Switches := ();
   case Runtime_Checks is
      when "enabled" => null;
      when others =>
         Runtime_Checks_Switches :=
           ("-gnatp"); -- Supress checks
   end case;

   Style_Checks_Switches := ();
   case Style_Checks is
      when "enabled" => null;
         Style_Checks_Switches :=
           ("-gnatyg",   -- GNAT Style checks
            "-gnaty-d",  -- Disable no DOS line terminators
            "-gnatyM80", -- Maximum line length
            "-gnatyO");  -- Overriding subprograms explicitly marked as such
      when others => null;
   end case;

   Contracts_Switches := ();
   case Contracts_Checks is
      when "enabled" => null;
         Contracts_Switches :=
           ("-gnata"); --  Enable assertions and contracts
      when others =>
   end case;

   Build_Switches := ();
   case Build_Mode is
      when "optimize" =>
         Build_Switches := ("-O3",     -- Optimization
                            "-gnatn"); -- Enable inlining
      when "debug" =>
         Build_Switches := ("-g",   -- Debug info
                            "-Og"); -- No optimization
   end case;

   package Compiler is
      for Default_Switches ("Ada") use
        Compile_Checks_Switches &
        Build_Switches &
        Runtime_Checks_Switches &
        Style_Checks_Switches &
        Contracts_Switches &
        ("-gnatQ");  -- Don't quit. Generate ALI and tree files even if illegalities
   end Compiler;

   package Binder is
      for Switches ("Ada") use ("-Es"); --  Symbolic traceback
   end Binder;

end Minisamd51_Bsp;
